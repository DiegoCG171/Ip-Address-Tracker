{"version":3,"sources":["components/ArrorIcon.tsx","helpers/getGeolocation.tsx","pages/IpTrackerPage.tsx","hooks/useForm.tsx","App.tsx","index.tsx"],"names":["ArrorIcon","props","xmlns","width","height","fill","stroke","strokeWidth","d","getGeolocation","ip","a","URL","fetch","resp","json","data","lng","location","lat","city","country","postalCode","timeZone","timezone","isp","mapboxgl","accessToken","ipDataInitial","IpTrackerPage","initialState","useState","form","setForm","handleChange","target","name","value","useForm","mapContainer","useRef","setMapState","zoom","initialPoint","setInitialPoint","ipData","setIpData","useEffect","map","Map","container","style","center","Marker","setLngLat","addTo","then","className","placeholder","type","onChange","onClick","ev","preventDefault","validator","isIP","id","ref","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2effc9df.chunk.js","sourcesContent":["import React, { SVGProps } from 'react'\n\ninterface Props extends SVGProps<SVGSVGElement>{}\n\nexport const ArrorIcon = (props: Props) => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={11} height={14} {...props}>\n            <path fill=\"none\" stroke=\"#FFF\" strokeWidth={3} d=\"M2 1l6 6-6 6\" />\n        </svg>\n    )\n}\n","\nexport const getGeolocation = async (ip: string) => {\n    const URL = `https://geo.ipify.org/api/v1?apiKey=at_jCfpV6wLN9fdKRqpcNIZp2Xnuz5Mk&ipAddress=${ip}`\n\n    const resp = await fetch(URL);\n    const data = await resp.json();\n\n    return  {\n        lng: data.location.lng,\n        lat: data.location.lat,\n        ip: data.ip,\n        city: data.location.city,\n        country: data.location.country,\n        postalCode: data.location.postalCode,\n        timeZone: data.location.timezone,\n        isp: data.isp\n    }\n\n\n}","\nimport mapboxgl, { Map } from 'mapbox-gl';\nimport { FormEvent, useEffect, useRef, useState } from 'react';\nimport validator from 'validator';\n\nimport { useForm } from '../hooks/useForm'\nimport { ArrorIcon } from '../components/ArrorIcon';\nimport { getGeolocation } from '../helpers/getGeolocation';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoibnltZGllZ28iLCJhIjoiY2twMjg1OTRuMDFvczJyazE5cm1pYXBycSJ9.H6XgcK8xxFhvL0WJZtTTHQ';\n\nconst ipDataInitial = {\n    ip: '',\n    city: '',\n    country: '',\n    postalCode: '',\n    timeZone: '',\n    isp: ''\n}\n\nexport const IpTrackerPage = () => {\n\n    const { form, handleChange } = useForm({\n        ip: ''\n    });\n\n    const mapContainer = useRef<HTMLDivElement>(null);\n    const [, setMapState] = useState<Map>();\n\n    const [initialPoint, setInitialPoint] = useState({\n        lng: -122.078514,\n        lat: 37.40599,\n        zoom: 15\n    });\n\n    const [ipData, setIpData] = useState(ipDataInitial);\n\n\n    useEffect(() => {\n        const map = new mapboxgl.Map({\n            container: 'map',\n            style: 'mapbox://styles/mapbox/streets-v11',\n            center: [initialPoint.lng, initialPoint.lat],\n            zoom: initialPoint.zoom\n        });\n        const marker = new mapboxgl.Marker();\n\n        marker.setLngLat([initialPoint.lng, initialPoint.lat]).addTo(map);\n        setMapState(map);\n    }, [initialPoint]);\n\n    useEffect(() => {\n        getGeolocation('')\n                .then(data => {\n                    setInitialPoint( d => ({\n                        ...d,\n                        lng: data.lng,\n                        lat: data.lat\n                    }));\n\n                    setIpData({\n                        ip: data.ip,\n                        city: data.city,\n                        country: data.country,\n                        isp: data.isp,\n                        postalCode: data.postalCode,\n                        timeZone: data.timeZone\n                    })\n                })\n    },[])\n\n\n    const handleSubmit = (ev: FormEvent<HTMLButtonElement>) => {\n        ev.preventDefault();\n\n        if (validator.isIP(form.ip)) {\n            getGeolocation(form.ip)\n                .then(data => {\n                    setInitialPoint({\n                        ...initialPoint,\n                        lng: data.lng,\n                        lat: data.lat\n                    });\n\n                    setIpData({\n                        ip: data.ip,\n                        city: data.city,\n                        country: data.country,\n                        isp: data.isp,\n                        postalCode: data.postalCode,\n                        timeZone: data.timeZone\n                    })\n                })\n        }\n\n        setIpData(ipDataInitial);\n\n    }\n\n\n    return (\n        <main>\n            <div className='banner'>\n                <h1 className='banner__title' >IP Address Tracker</h1>\n                <form className='banner__form' >\n                    <input\n                        className='banner__input'\n                        placeholder='Search for any IP address or domain '\n                        type=\"text\"\n                        name='ip'\n                        value={form.ip}\n                        onChange={handleChange}\n                    />\n                    <button className='banner__button' onClick={handleSubmit} type='submit'>\n                        <ArrorIcon />\n                    </button>\n                </form>\n                {\n                    ipData.ip !== '' &&\n                    <ul className='banner__data-container' >\n                        <li className='banner__data-item' >\n                            <span className='data-item__title'>IP ADDRESS</span>\n                            <p className='data-item__data' >{ipData.ip}</p>\n                        </li>\n                        <li className='banner__data-item' >\n                            <span className='data-item__title'>LOCATION</span>\n                            <p className='data-item__data' >{ipData.city}, {ipData.country} {ipData.postalCode}</p>\n                        </li>\n                        <li className='banner__data-item' >\n                            <span className='data-item__title'>TIMEZONE</span>\n                            <p className='data-item__data' >UTC{ipData.timeZone}</p>\n                        </li>\n                        <li className='banner__data-item' >\n                            <span className='data-item__title'>ISP</span>\n                            <p className='data-item__data' >{ipData.isp}</p>\n                        </li>\n                    </ul>\n                }\n            </div>\n            <div\n                id='map'\n                ref={mapContainer}\n                className='map'\n            />\n        </main>\n    )\n}\n","\nimport { useState, ChangeEvent} from 'react';\n\nexport const useForm = <T extends Object>(initialState: T) => {\n\n    const [form, setForm] = useState(initialState);\n\n    const handleChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\n\n        const { name, value } = target;\n        setForm({\n            ...form,\n            [name]: value\n        })\n    }\n\n    return {\n        form,\n        handleChange,\n    }\n\n}","import { IpTrackerPage } from './pages/IpTrackerPage';\n\nimport './styles/style.scss';\n\nexport const App = () => {\n    return (\n        <>\n            <IpTrackerPage />\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}